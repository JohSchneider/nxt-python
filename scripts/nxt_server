#!/usr/bin/env python3
#
# nxt_server program -- Serve an interface to the NXT brick
# Copyright (C) 2011  zonedabone, Marcus Wanner
# Copyright (C) 2021  Nicolas Schodet
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import argparse
import nxt.locator
import socket, traceback

def serve(brick, channel, details):
    """Handles serving the client."""
    print("Connection started (" + details[0] + ')')
    run = True
    try:
        while run:
            data = channel.recv(1024)
            if not data:
                break
            code = data[0]
            if code == 0x00 or code == 0x01 or code == 0x02:
                brick.sock.send(data)
                reply = brick.sock.recv()
                channel.send(reply)
            elif code == 0x80 or code == 0x81:
                brick.sock.send(data)
            elif code == 0x98:
                channel.send(brick.sock.type.encode("ascii"))
            elif code == 0x99:
                run = False
            else:
                raise RuntimeError("Bad protocol")
    except:
        traceback.print_exc()
    finally:
        channel.close()
        print("Connection Finished")

if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Command server for NXT brick")
    p.add_argument("--host", metavar="ADDR", help="brick address")
    p.add_argument("--name", help="brick name")
    p.add_argument("-p", "--port", type=int, default=2727, help="bind port")
    options = p.parse_args()

    print("Connecting to NXT...")
    brick = nxt.locator.find_one_brick(options.host, options.name)
    print("Brick found.")

    print("Starting server...")
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("", options.port))
    server.listen(1)
    # Have the server serve "forever":
    while True:
        channel, details = server.accept()
        serve(brick, channel, details)
